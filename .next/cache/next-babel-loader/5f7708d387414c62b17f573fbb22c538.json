{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nconst issuesDirectory = path.join(process.cwd(), \"issues\");\nexport function getAllIssuesIds() {\n  const fileNames = fs.readdirSync(issuesDirectory);\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, \"\")\n      }\n    };\n  });\n}\nexport function getIssueData(id) {\n  const fullPath = path.join(issuesDirectory, `${id}.md`);\n  const fileContents = fs.readFileSync(fullPath, \"utf8\");\n  const matterResult = matter(fileContents);\n  return _objectSpread({\n    id\n  }, matterResult.data);\n}","map":{"version":3,"sources":["C:/Users/Kamil StyÅ›/OneDrive/Dokumenty/PWr/VII semestr/Seminarium dyplomowe/Projekt/SprawaDlaImigranta/lib/issues.js"],"names":["fs","path","matter","issuesDirectory","join","process","cwd","getAllIssuesIds","fileNames","readdirSync","map","fileName","params","id","replace","getIssueData","fullPath","fileContents","readFileSync","matterResult","data"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,MAAMC,eAAe,GAAGF,IAAI,CAACG,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,QAAzB,CAAxB;AAEA,OAAO,SAASC,eAAT,GAA2B;AAChC,QAAMC,SAAS,GAAGR,EAAE,CAACS,WAAH,CAAeN,eAAf,CAAlB;AACA,SAAOK,SAAS,CAACE,GAAV,CAAeC,QAAD,IAAc;AACjC,WAAO;AACLC,MAAAA,MAAM,EAAE;AACNC,QAAAA,EAAE,EAAEF,QAAQ,CAACG,OAAT,CAAiB,OAAjB,EAA0B,EAA1B;AADE;AADH,KAAP;AAKD,GANM,CAAP;AAOD;AAED,OAAO,SAASC,YAAT,CAAsBF,EAAtB,EAA0B;AAC/B,QAAMG,QAAQ,GAAGf,IAAI,CAACG,IAAL,CAAUD,eAAV,EAA4B,GAAEU,EAAG,KAAjC,CAAjB;AACA,QAAMI,YAAY,GAAGjB,EAAE,CAACkB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB;AACA,QAAMG,YAAY,GAAGjB,MAAM,CAACe,YAAD,CAA3B;AAEA;AACEJ,IAAAA;AADF,KAEKM,YAAY,CAACC,IAFlB;AAID","sourcesContent":["import fs from \"fs\";\r\nimport path from \"path\";\r\nimport matter from \"gray-matter\";\r\n\r\nconst issuesDirectory = path.join(process.cwd(), \"issues\");\r\n\r\nexport function getAllIssuesIds() {\r\n  const fileNames = fs.readdirSync(issuesDirectory);\r\n  return fileNames.map((fileName) => {\r\n    return {\r\n      params: {\r\n        id: fileName.replace(/\\.md$/, \"\"),\r\n      },\r\n    };\r\n  });\r\n}\r\n\r\nexport function getIssueData(id) {\r\n  const fullPath = path.join(issuesDirectory, `${id}.md`);\r\n  const fileContents = fs.readFileSync(fullPath, \"utf8\");\r\n  const matterResult = matter(fileContents);\r\n\r\n  return {\r\n    id,\r\n    ...matterResult.data,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}