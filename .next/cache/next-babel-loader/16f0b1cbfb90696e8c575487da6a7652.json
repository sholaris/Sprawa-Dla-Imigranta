{"ast":null,"code":"function validatePESEL(pesel) {\n  var reg = /^[0-9]{11}$/;\n  if (reg.test(pesel) == false) return false;else {\n    var digits = (\"\" + pesel).split(\"\");\n\n    if (parseInt(pesel.substring(4, 6)) > 31 || parseInt(pesel.substring(2, 4)) > 12) {\n      return false;\n    }\n\n    var checksum = (1 * parseInt(digits[0]) + 3 * parseInt(digits[1]) + 7 * parseInt(digits[2]) + 9 * parseInt(digits[3]) + 1 * parseInt(digits[4]) + 3 * parseInt(digits[5]) + 7 * parseInt(digits[6]) + 9 * parseInt(digits[7]) + 1 * parseInt(digits[8]) + 3 * parseInt(digits[9])) % 10;\n    if (checksum == 0) checksum = 10;\n    checksum = 10 - checksum;\n    return parseInt(digits[10]) == checksum;\n  }\n}\n\nfunction validateLength(length) {\n  var reg = /^[0-9]{3}$/;\n  if (!reg.test(length)) return false;else if (parseInt(length) > 251) return false;else return true;\n}\n\nfunction validateNumbers(data) {\n  var reg = /^[0-9-]*$/;\n  if (!reg.test(data)) return false;else return true;\n}\n\nexport default function validate(values) {\n  var errors = {};\n  var empty_field_error = \"Pole nie może być puste\";\n  var wrong_date_error = \"Podaj datę z przeszłości\";\n  var wrong_postalcode_error = \"Podaj kod pocztowy w formacie nn-nnn\";\n  var input_birthDate = new Date(values.birthDate);\n  var input_docIssueDate = new Date(values.docIssueDate);\n  var input_docExpiryDate = new Date(values.docExpiryDate);\n  var input_spouseBirthDate = new Date(values.spouseBirthDate);\n  var today = new Date();\n  var regexp = /^[0-9]{2}(?:-[0-9]{3})?$/;\n\n  for (var key in values) {\n    if (values.hasOwnProperty(key)) {\n      if (!values[key]) {\n        errors[key] = empty_field_error;\n      }\n    }\n  }\n\n  if (input_birthDate >= today) {\n    errors.birthDate = wrong_date_error;\n  }\n\n  if (input_docIssueDate >= today) {\n    errors.docIssueDate = wrong_date_error;\n  }\n\n  if (input_docExpiryDate >= today) {\n    errors.docExpiryDate = wrong_date_error;\n  }\n\n  if (!validateLength(values.length)) {\n    errors.length = \"Podaj poprawną wartość\";\n  }\n\n  if (values.pesel) {\n    if (!validatePESEL(values.pesel)) {\n      errors.pesel = \"Prodaj porpawny numer PESEL\";\n    }\n  }\n\n  if (!values.pesel) {\n    errors.pesel = \"\";\n  }\n\n  if (!regexp.test(values.resPostalCode)) {\n    errors.resPostalCode = wrong_postalcode_error;\n  }\n\n  if (!validateNumbers(values.resHomeNumber)) {\n    errors.resHomeNumber = \"Podaj porpawną wartość\";\n  }\n\n  if (!validateNumbers(values.resApartmentNumber)) {\n    errors.resApartmentNumber = \"Podaj poprawną wartość\";\n  }\n\n  if (!values.spouseBirthDate) {\n    errors.spouseBirthDate = \"\";\n  }\n\n  if (values.spouseBirthDate && input_spouseBirthDate >= today) {\n    errors.spouseBirthDate = wrong_date_error;\n  }\n\n  if (!validateNumbers(values.spouseHomeNumber)) {\n    errors.spouseHomeNumber = \"Podaj poprawną wartość\";\n  }\n\n  if (!values.spouseHomeNumber) {\n    errors.spouseHomeNumber = \"\";\n  }\n\n  if (!validateNumbers(values.spouseApartmentNumber)) {\n    errors.spouseApartmentNumber = \"Podaj poprawną wartość\";\n  }\n\n  if (!values.spouseApartmentNumber) {\n    errors.spouseApartmentNumber = \"\";\n  }\n\n  if (!regexp.test(values.spousePostalCode)) {\n    errors.spousePostalCode = wrong_postalcode_error;\n  }\n\n  if (!values.spousePostalCode) {\n    errors.spousePostalCode = \"\";\n  }\n\n  return errors;\n}","map":{"version":3,"sources":["C:/Users/kamil/OneDrive/Dokumenty/PWr/VII semestr/Seminarium dyplomowe/Projekt/SprawaDlaImigranta/components/shared/Wnioski/validateForm.js"],"names":["validatePESEL","pesel","reg","test","digits","split","parseInt","substring","checksum","validateLength","length","validateNumbers","data","validate","values","errors","empty_field_error","wrong_date_error","wrong_postalcode_error","input_birthDate","Date","birthDate","input_docIssueDate","docIssueDate","input_docExpiryDate","docExpiryDate","input_spouseBirthDate","spouseBirthDate","today","regexp","key","hasOwnProperty","resPostalCode","resHomeNumber","resApartmentNumber","spouseHomeNumber","spouseApartmentNumber","spousePostalCode"],"mappings":"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","sourcesContent":["function validatePESEL(pesel) {\r\n  const reg = /^[0-9]{11}$/;\r\n  if (reg.test(pesel) == false) return false;\r\n  else {\r\n    var digits = (\"\" + pesel).split(\"\");\r\n    if (\r\n      parseInt(pesel.substring(4, 6)) > 31 ||\r\n      parseInt(pesel.substring(2, 4)) > 12\r\n    ) {\r\n      return false;\r\n    }\r\n    var checksum =\r\n      (1 * parseInt(digits[0]) +\r\n        3 * parseInt(digits[1]) +\r\n        7 * parseInt(digits[2]) +\r\n        9 * parseInt(digits[3]) +\r\n        1 * parseInt(digits[4]) +\r\n        3 * parseInt(digits[5]) +\r\n        7 * parseInt(digits[6]) +\r\n        9 * parseInt(digits[7]) +\r\n        1 * parseInt(digits[8]) +\r\n        3 * parseInt(digits[9])) %\r\n      10;\r\n    if (checksum == 0) checksum = 10;\r\n    checksum = 10 - checksum;\r\n    return parseInt(digits[10]) == checksum;\r\n  }\r\n}\r\n\r\nfunction validateLength(length) {\r\n  var reg = /^[0-9]{3}$/;\r\n  if (!reg.test(length)) return false;\r\n  else if (parseInt(length) > 251) return false;\r\n  else return true;\r\n}\r\nfunction validateNumbers(data) {\r\n  var reg = /^[0-9-]*$/;\r\n  if (!reg.test(data)) return false;\r\n  else return true;\r\n}\r\n\r\nexport default function validate(values) {\r\n  let errors = {};\r\n  const empty_field_error = \"Pole nie może być puste\";\r\n  const wrong_date_error = \"Podaj datę z przeszłości\";\r\n  const wrong_postalcode_error = \"Podaj kod pocztowy w formacie nn-nnn\";\r\n  const input_birthDate = new Date(values.birthDate);\r\n  const input_docIssueDate = new Date(values.docIssueDate);\r\n  const input_docExpiryDate = new Date(values.docExpiryDate);\r\n  const input_spouseBirthDate = new Date(values.spouseBirthDate);\r\n  const today = new Date();\r\n  const regexp = /^[0-9]{2}(?:-[0-9]{3})?$/;\r\n\r\n  for (var key in values) {\r\n    if (values.hasOwnProperty(key)) {\r\n      if (!values[key]) {\r\n        errors[key] = empty_field_error;\r\n      }\r\n    }\r\n  }\r\n  if (input_birthDate >= today) {\r\n    errors.birthDate = wrong_date_error;\r\n  }\r\n  if (input_docIssueDate >= today) {\r\n    errors.docIssueDate = wrong_date_error;\r\n  }\r\n  if (input_docExpiryDate >= today) {\r\n    errors.docExpiryDate = wrong_date_error;\r\n  }\r\n  if (!validateLength(values.length)) {\r\n    errors.length = \"Podaj poprawną wartość\";\r\n  }\r\n  if (values.pesel) {\r\n    if (!validatePESEL(values.pesel)) {\r\n      errors.pesel = \"Prodaj porpawny numer PESEL\";\r\n    }\r\n  }\r\n  if (!values.pesel) {\r\n    errors.pesel = \"\";\r\n  }\r\n  if (!regexp.test(values.resPostalCode)) {\r\n    errors.resPostalCode = wrong_postalcode_error;\r\n  }\r\n  if (!validateNumbers(values.resHomeNumber)) {\r\n    errors.resHomeNumber = \"Podaj porpawną wartość\";\r\n  }\r\n  if (!validateNumbers(values.resApartmentNumber)) {\r\n    errors.resApartmentNumber = \"Podaj poprawną wartość\";\r\n  }\r\n  if (!values.spouseBirthDate) {\r\n    errors.spouseBirthDate = \"\";\r\n  }\r\n  if (values.spouseBirthDate && input_spouseBirthDate >= today) {\r\n    errors.spouseBirthDate = wrong_date_error;\r\n  }\r\n  if (!validateNumbers(values.spouseHomeNumber)) {\r\n    errors.spouseHomeNumber = \"Podaj poprawną wartość\";\r\n  }\r\n  if (!values.spouseHomeNumber) {\r\n    errors.spouseHomeNumber = \"\";\r\n  }\r\n  if (!validateNumbers(values.spouseApartmentNumber)) {\r\n    errors.spouseApartmentNumber = \"Podaj poprawną wartość\";\r\n  }\r\n  if (!values.spouseApartmentNumber) {\r\n    errors.spouseApartmentNumber = \"\";\r\n  }\r\n  if (!regexp.test(values.spousePostalCode)) {\r\n    errors.spousePostalCode = wrong_postalcode_error;\r\n  }\r\n  if (!values.spousePostalCode) {\r\n    errors.spousePostalCode = \"\";\r\n  }\r\n\r\n  return errors;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}