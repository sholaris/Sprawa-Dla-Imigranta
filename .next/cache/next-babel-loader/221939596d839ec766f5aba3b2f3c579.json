{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nimport remark from \"remark\";\nimport html from \"remark-html\"; // export function getIssuesIdsByDir(dir){\n//   const issuesDirectory = path.join(process.cwd(), \"issues\", dir);\n//   const fileNames = fs.readdirSync(issuesDirectory);\n//   return fileNames.map((fileName) => {\n//     return {\n//       params: {\n//         id: fileName.replace(/\\.md$/, \"\"),\n//       },\n//     };\n//   });\n// }\n\nexport function getAllIssuesIds() {\n  const issuesDirectory = path.join(process.cwd(), \"issues\");\n  const foldersNames = fs.readdirSync(issuesDirectory);\n  foldersNames.forEach(folder => {\n    const folderPath = path.join(issuesDirectory, folder);\n    const fileNames = fs.readdirSync(folderPath);\n    return fileNames.map(fileName => {\n      return {\n        params: {\n          id: fileName.replace(/\\.md$/, \"\")\n        }\n      };\n    });\n  }); // const fileNames = fs.readdirSync(issuesDirectory);\n  // return fileNames.map((fileName) => {\n  //   return {\n  //     params: {\n  //       id: fileName.replace(/\\.md$/, \"\"),\n  //     },\n  //   };\n  // });\n}\nexport async function getIssueData(id) {\n  const issuesDirectory = path.join(process.cwd(), \"issues\");\n  const foldersNames = fs.readdirSync(issuesDirectory);\n  foldersNames.forEach(folder => {\n    const folderPath = path.join(issuesDirectory, folder);\n    const fileNames = fs.readdirSync(folderPath);\n    fileNames.forEach(file => {\n      if (file.replace(/\\.md$/, \"\") == id) {\n        const fullPath = path.join(issuesDirectory, folder, `${id}.md`);\n      }\n    });\n  });\n  const fileContents = fs.readFileSync(fullPath, \"utf8\");\n  const matterResult = matter(fileContents);\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString();\n  return _objectSpread({\n    id,\n    contentHtml\n  }, matterResult.data); // const fullPath = path.join(issuesDirectory, `${id}.md`);\n  // const fileContents = fs.readFileSync(fullPath, \"utf8\");\n  // const matterResult = matter(fileContents);\n  // const processedContent = await remark()\n  //   .use(html)\n  //   .process(matterResult.content);\n  // const contentHtml = processedContent.toString();\n  // return {\n  //   id,\n  //   contentHtml,\n  //   ...matterResult.data,\n  // };\n}","map":{"version":3,"sources":["C:/Users/kamil/OneDrive/Dokumenty/PWr/VII semestr/Seminarium dyplomowe/Projekt/SprawaDlaImigranta/lib/issues.js"],"names":["fs","path","matter","remark","html","getAllIssuesIds","issuesDirectory","join","process","cwd","foldersNames","readdirSync","forEach","folder","folderPath","fileNames","map","fileName","params","id","replace","getIssueData","file","fullPath","fileContents","readFileSync","matterResult","processedContent","use","content","contentHtml","toString","data"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,eAAT,GAA2B;AAChC,QAAMC,eAAe,GAAGL,IAAI,CAACM,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,QAAzB,CAAxB;AACA,QAAMC,YAAY,GAAGV,EAAE,CAACW,WAAH,CAAeL,eAAf,CAArB;AACAI,EAAAA,YAAY,CAACE,OAAb,CAAsBC,MAAD,IAAY;AAC/B,UAAMC,UAAU,GAAGb,IAAI,CAACM,IAAL,CAAUD,eAAV,EAA2BO,MAA3B,CAAnB;AACA,UAAME,SAAS,GAAGf,EAAE,CAACW,WAAH,CAAeG,UAAf,CAAlB;AACA,WAAOC,SAAS,CAACC,GAAV,CAAeC,QAAD,IAAc;AACjC,aAAO;AACLC,QAAAA,MAAM,EAAE;AACNC,UAAAA,EAAE,EAAEF,QAAQ,CAACG,OAAT,CAAiB,OAAjB,EAA0B,EAA1B;AADE;AADH,OAAP;AAKD,KANM,CAAP;AAOD,GAVD,EAHgC,CAehC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AAED,OAAO,eAAeC,YAAf,CAA4BF,EAA5B,EAAgC;AACrC,QAAMb,eAAe,GAAGL,IAAI,CAACM,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,QAAzB,CAAxB;AACA,QAAMC,YAAY,GAAGV,EAAE,CAACW,WAAH,CAAeL,eAAf,CAArB;AACAI,EAAAA,YAAY,CAACE,OAAb,CAAsBC,MAAD,IAAY;AAC/B,UAAMC,UAAU,GAAGb,IAAI,CAACM,IAAL,CAAUD,eAAV,EAA2BO,MAA3B,CAAnB;AACA,UAAME,SAAS,GAAGf,EAAE,CAACW,WAAH,CAAeG,UAAf,CAAlB;AACAC,IAAAA,SAAS,CAACH,OAAV,CAAmBU,IAAD,IAAU;AAC1B,UAAIA,IAAI,CAACF,OAAL,CAAa,OAAb,EAAsB,EAAtB,KAA6BD,EAAjC,EAAqC;AACnC,cAAMI,QAAQ,GAAGtB,IAAI,CAACM,IAAL,CAAUD,eAAV,EAA2BO,MAA3B,EAAoC,GAAEM,EAAG,KAAzC,CAAjB;AACD;AACF,KAJD;AAKD,GARD;AASA,QAAMK,YAAY,GAAGxB,EAAE,CAACyB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB;AACA,QAAMG,YAAY,GAAGxB,MAAM,CAACsB,YAAD,CAA3B;AACA,QAAMG,gBAAgB,GAAG,MAAMxB,MAAM,GAClCyB,GAD4B,CACxBxB,IADwB,EAE5BI,OAF4B,CAEpBkB,YAAY,CAACG,OAFO,CAA/B;AAGA,QAAMC,WAAW,GAAGH,gBAAgB,CAACI,QAAjB,EAApB;AACA;AACEZ,IAAAA,EADF;AAEEW,IAAAA;AAFF,KAGKJ,YAAY,CAACM,IAHlB,EAlBqC,CAwBrC;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACD","sourcesContent":["import fs from \"fs\";\r\nimport path from \"path\";\r\nimport matter from \"gray-matter\";\r\nimport remark from \"remark\";\r\nimport html from \"remark-html\";\r\n\r\n// export function getIssuesIdsByDir(dir){\r\n//   const issuesDirectory = path.join(process.cwd(), \"issues\", dir);\r\n//   const fileNames = fs.readdirSync(issuesDirectory);\r\n//   return fileNames.map((fileName) => {\r\n//     return {\r\n//       params: {\r\n//         id: fileName.replace(/\\.md$/, \"\"),\r\n//       },\r\n//     };\r\n//   });\r\n// }\r\n\r\nexport function getAllIssuesIds() {\r\n  const issuesDirectory = path.join(process.cwd(), \"issues\");\r\n  const foldersNames = fs.readdirSync(issuesDirectory);\r\n  foldersNames.forEach((folder) => {\r\n    const folderPath = path.join(issuesDirectory, folder);\r\n    const fileNames = fs.readdirSync(folderPath);\r\n    return fileNames.map((fileName) => {\r\n      return {\r\n        params: {\r\n          id: fileName.replace(/\\.md$/, \"\"),\r\n        },\r\n      };\r\n    });\r\n  });\r\n\r\n  // const fileNames = fs.readdirSync(issuesDirectory);\r\n  // return fileNames.map((fileName) => {\r\n  //   return {\r\n  //     params: {\r\n  //       id: fileName.replace(/\\.md$/, \"\"),\r\n  //     },\r\n  //   };\r\n  // });\r\n}\r\n\r\nexport async function getIssueData(id) {\r\n  const issuesDirectory = path.join(process.cwd(), \"issues\");\r\n  const foldersNames = fs.readdirSync(issuesDirectory);\r\n  foldersNames.forEach((folder) => {\r\n    const folderPath = path.join(issuesDirectory, folder);\r\n    const fileNames = fs.readdirSync(folderPath);\r\n    fileNames.forEach((file) => {\r\n      if (file.replace(/\\.md$/, \"\") == id) {\r\n        const fullPath = path.join(issuesDirectory, folder, `${id}.md`);\r\n      }\r\n    });\r\n  });\r\n  const fileContents = fs.readFileSync(fullPath, \"utf8\");\r\n  const matterResult = matter(fileContents);\r\n  const processedContent = await remark()\r\n    .use(html)\r\n    .process(matterResult.content);\r\n  const contentHtml = processedContent.toString();\r\n  return {\r\n    id,\r\n    contentHtml,\r\n    ...matterResult.data,\r\n  };\r\n\r\n  // const fullPath = path.join(issuesDirectory, `${id}.md`);\r\n  // const fileContents = fs.readFileSync(fullPath, \"utf8\");\r\n  // const matterResult = matter(fileContents);\r\n\r\n  // const processedContent = await remark()\r\n  //   .use(html)\r\n  //   .process(matterResult.content);\r\n  // const contentHtml = processedContent.toString();\r\n\r\n  // return {\r\n  //   id,\r\n  //   contentHtml,\r\n  //   ...matterResult.data,\r\n  // };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}