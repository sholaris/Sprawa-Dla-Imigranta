{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nimport remark from \"remark\";\nimport html from \"remark-html\";\nexport function getAllIssuesIds() {\n  const issuesDirectory = path.join(process.cwd(), \"issues\");\n  const foldersNames = fs.readdirSync(issuesDirectory);\n  var allFiles = [];\n  foldersNames.forEach(folder => {\n    const folderPath = path.join(issuesDirectory, folder);\n    const fileNames = fs.readdirSync(folderPath);\n    allFiles.concat(fileNames);\n  });\n  return allFiles.map(File => {\n    return {\n      params: {\n        id: File.replace(/\\.md$/, \"\")\n      }\n    };\n  });\n}\nexport async function getIssueData(id) {\n  const issuesDirectory = path.join(process.cwd(), \"issues\");\n  const foldersNames = fs.readdirSync(issuesDirectory);\n  var fullPath = \"\";\n  foldersNames.forEach(folder => {\n    const folderPath = path.join(issuesDirectory, folder);\n    const fileNames = fs.readdirSync(folderPath);\n    fileNames.forEach(file => {\n      if (file.replace(/\\.md$/, \"\") == id) {\n        fullPath = path.join(issuesDirectory, folder, `${id}.md`);\n      }\n    });\n  });\n  const fileContents = fs.readFileSync(fullPath, \"utf8\");\n  const matterResult = matter(fileContents);\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString();\n  return _objectSpread({\n    id,\n    contentHtml\n  }, matterResult.data);\n}","map":null,"metadata":{},"sourceType":"module"}