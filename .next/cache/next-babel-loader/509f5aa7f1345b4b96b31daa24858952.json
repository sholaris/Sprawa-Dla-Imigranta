{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kamil\\\\OneDrive\\\\Dokumenty\\\\PWr\\\\VII semestr\\\\Seminarium dyplomowe\\\\Projekt\\\\SprawaDlaImigranta\\\\components\\\\shared\\\\Cudzoziemcy\\\\FoldersHeaderBar.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Breadcrumb, Row, Container } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useRouter } from \"next/router\";\n\nconst parseText = text => {\n  var displayedText = true;\n\n  for (var x = 0; x < text.length; x++) {\n    var c = text.charAt(x);\n\n    if (displayedText && c == \"-\") {\n      text = text.substring(0, x) + \" \" + text.substring(x + 1, text.length);\n    }\n  }\n\n  return text.charAt(0).toUpperCase() + text.slice(1);\n};\n\nconst parseURL = url => {\n  var items = url.split(\"/\");\n  items.map(item => {\n    item.split(\"-\").join(\" \");\n  });\n  return items;\n};\n\nconst FoldersHeaderBar = () => {\n  const router = useRouter();\n  const items = parseURL(router.asPath);\n  return __jsx(Container, {\n    className: \"grey-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    className: \"folders-navigation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, __jsx(Breadcrumb, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, items.map(item => __jsx(Breadcrumb.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, item)))));\n};\n\nexport default FoldersHeaderBar;","map":{"version":3,"sources":["C:/Users/kamil/OneDrive/Dokumenty/PWr/VII semestr/Seminarium dyplomowe/Projekt/SprawaDlaImigranta/components/shared/Cudzoziemcy/FoldersHeaderBar.js"],"names":["Breadcrumb","Row","Container","FontAwesomeIcon","useRouter","parseText","text","displayedText","x","length","c","charAt","substring","toUpperCase","slice","parseURL","url","items","split","map","item","join","FoldersHeaderBar","router","asPath"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,SAA1B,QAA2C,iBAA3C;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAEA,MAAMC,SAAS,GAAIC,IAAD,IAAU;AAC1B,MAAIC,aAAa,GAAG,IAApB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,QAAIE,CAAC,GAAGJ,IAAI,CAACK,MAAL,CAAYH,CAAZ,CAAR;;AAEA,QAAID,aAAa,IAAIG,CAAC,IAAI,GAA1B,EAA+B;AAC7BJ,MAAAA,IAAI,GAAGA,IAAI,CAACM,SAAL,CAAe,CAAf,EAAkBJ,CAAlB,IAAuB,GAAvB,GAA6BF,IAAI,CAACM,SAAL,CAAeJ,CAAC,GAAG,CAAnB,EAAsBF,IAAI,CAACG,MAA3B,CAApC;AACD;AACF;;AACD,SAAOH,IAAI,CAACK,MAAL,CAAY,CAAZ,EAAeE,WAAf,KAA+BP,IAAI,CAACQ,KAAL,CAAW,CAAX,CAAtC;AACD,CAVD;;AAYA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AACxB,MAAIC,KAAK,GAAGD,GAAG,CAACE,KAAJ,CAAU,GAAV,CAAZ;AACAD,EAAAA,KAAK,CAACE,GAAN,CAAWC,IAAD,IAAU;AAClBA,IAAAA,IAAI,CAACF,KAAL,CAAW,GAAX,EAAgBG,IAAhB,CAAqB,GAArB;AACD,GAFD;AAGA,SAAOJ,KAAP;AACD,CAND;;AAQA,MAAMK,gBAAgB,GAAG,MAAM;AAC7B,QAAMC,MAAM,GAAGnB,SAAS,EAAxB;AACA,QAAMa,KAAK,GAAGF,QAAQ,CAACQ,MAAM,CAACC,MAAR,CAAtB;AACA,SACE,MAAC,SAAD;AAAW,IAAA,SAAS,EAAC,UAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,KAAK,CAACE,GAAN,CAAWC,IAAD,IACT,MAAC,UAAD,CAAY,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkBA,IAAlB,CADD,CADH,CADF,CADF,CADF;AAWD,CAdD;;AAgBA,eAAeE,gBAAf","sourcesContent":["import { Breadcrumb, Row, Container } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useRouter } from \"next/router\";\r\n\r\nconst parseText = (text) => {\r\n  var displayedText = true;\r\n  for (var x = 0; x < text.length; x++) {\r\n    var c = text.charAt(x);\r\n\r\n    if (displayedText && c == \"-\") {\r\n      text = text.substring(0, x) + \" \" + text.substring(x + 1, text.length);\r\n    }\r\n  }\r\n  return text.charAt(0).toUpperCase() + text.slice(1);\r\n};\r\n\r\nconst parseURL = (url) => {\r\n  var items = url.split(\"/\");\r\n  items.map((item) => {\r\n    item.split(\"-\").join(\" \");\r\n  });\r\n  return items;\r\n};\r\n\r\nconst FoldersHeaderBar = () => {\r\n  const router = useRouter();\r\n  const items = parseURL(router.asPath);\r\n  return (\r\n    <Container className=\"grey-box\">\r\n      <Row className=\"folders-navigation\">\r\n        <Breadcrumb>\r\n          {items.map((item) => (\r\n            <Breadcrumb.Item>{item}</Breadcrumb.Item>\r\n          ))}\r\n        </Breadcrumb>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default FoldersHeaderBar;\r\n"]},"metadata":{},"sourceType":"module"}